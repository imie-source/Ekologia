package coop.ekologia.service.utils;

import javax.ejb.Local;

@Local
public interface StringUtilitiesInterface {
	/**
	 * Returns the first value which is not null.
	 * <pre>{@code
	 * nvl(null, "a")             => "a"
	 * nvl(null, null, null, "a") => "a"
	 * nvl("a", "b", "c", "d")    => "a"
	 * nvl(null, "b", "c", "d")   => "b"
	 * }</pre>
	 * 
	 * @param values
	 * @return
	 */
	public abstract String nvl(String... values);

	/**
	 * Checks if two {@link String} are equals.
	 * 
	 * <pre>{@code
	 * equals(null, "a") => false
	 * equals("a", null) => false
	 * equals(null, null) => true
	 * equals("a", "a") => true
	 * equals("a", "b") => false
	 * }</pre>
	 * 
	 * @param value1 The first {@code String}
	 * @param value2 The second {@code String}
	 * @return       @{code True} if the two {@code String} are equal
	 */
	boolean equals(String value1, String value2);
	
	/**
	 * Checks if two {@link String} are not equals.
	 * 
	 * <pre>{@code
	 * equals(null, "a") => true
	 * equals("a", null) => true
	 * equals(null, null) => false
	 * equals("a", "a") => false
	 * equals("a", "b") => true
	 * }</pre>
	 * 
	 * @param value1 The first {@code String}
	 * @param value2 The second {@code String}
	 * @return       @{code True} if the two {@code String} are not equal
	 */
	boolean notEquals(String value1, String value2);

	/**
	 * Transforms a user text with defined code into a html text to be displayed into web page.
	 * 
	 * @param userText The user text
	 * @return         The corresponding html.
	 */
    String htmlFromUserText(String userText);

    /**
     * Checks is there is at least one value which is equals to searched value.
     * 
     * <pre>{@code
     * isEqualOne("a", "a", "b") => true
     * isEqualOne("a", "b", "a") => true
     * isEqualOne("a", "b", "c") => false
     * isEqualOne(null, "a", "b") => false
     * isEqualOne(null, null, "c") => true
     * isEqualOne("a", "a", "a") => true
     * }</pre>
     * 
     * @param search         The value to search
     * @param acceptedValues The accepted values
     * @return               boolean if {@code search} is found in {@code acceptedValues}
     */
    boolean isEqualOne(String search, String... acceptedValues);
    
    /**
     * Generates a salt to be used by a crypt algorithm.
     * The generated salt is compatible with the algorithm of {@link #crypt(String, String)}.
     * 
     * @return The generated salt
     */
    String generateCryptSalt();

    /**
     * Encrypts a string with a salt.
     * The salt should be generated by {@link #generateCryptSalt()} for compatibility.
     * 
     * @param value The string to encrypt
     * @param salt  The salt to use with the encrypt algorithm
     * @return      The encrypted string
     */
    String crypt(String value, String salt);
}